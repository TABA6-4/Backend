name: Java CI with Gradle

# 워크플로우 실행 조건 정의
# main 브랜치에 push되거나 pull request가 발생할 때 실행
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

# 워크플로우 실행 시 권한 정의
permissions:
  contents: read # 코드 내용을 읽을 수 있는 권한 부여

jobs:
  build:
    # 워크플로우 실행 환경 설정 (Ubuntu 최신 버전)
    runs-on: ubuntu-latest

    steps:
      # 1. 저장소 코드를 가져옴
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. JDK 17 설치 및 환경 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17' # Java 버전 17 사용
          distribution: 'temurin' # AdoptOpenJDK의 Temurin 배포판 사용

      # 3. GitHub Secrets에서 application.yml 파일 생성
      - name: Make application.yml
        run: |
          mkdir -p ./src/main/resources # resources 폴더 생성
          echo "${{ secrets.APPLICATION_PROD }}" | base64 --decode > ./src/main/resources/application.yml
          cat ./src/main/resources/application.yml # 디버깅용으로 생성된 파일 내용 출력

      # 4. Gradle을 사용해 프로젝트 빌드
      - name: Build with Gradle
        run: |
          chmod +x ./gradlew # Gradle Wrapper 실행 권한 추가
          ./gradlew clean build -x test # 테스트 제외하고 빌드

      # 5. Docker Compose 최신 버전 업데이트
      - name: Update Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.26.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose # 실행 권한 추가

      # 6. Docker 이미지 빌드 및 Docker Hub로 푸시
      - name: Docker build & push to Docker repo
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }} # Docker Hub 로그인
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:latest . # Docker 이미지 빌드
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:latest # Docker Hub로 푸시

      # 7. 원격 서버에 배포
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }} # 원격 서버 주소
          username: ubuntu # 서버 접속 사용자명
          key: ${{ secrets.PRIVATE_KEY }} # SSH 개인 키
          script: |
            echo "Pulling image from docker hub ..."
            echo ${{ secrets.DOCKER_PASSWORD }} | sudo docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin # Docker Hub 로그인
            sudo docker-compose down --volumes # 기존 컨테이너 및 볼륨 삭제
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:latest # 최신 Docker 이미지 Pull
            sudo docker-compose up -d # Docker Compose로 컨테이너 실행
            docker image prune -f # 사용하지 않는 Docker 이미지 정리
