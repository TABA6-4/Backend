name: Java CI with Gradle

# 언제 이 파일의 내용이 실행될 것인지 정의
# 여기서는 main 브랜치에 코드가 push 되거나 pull_request되었을 때 실행
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

# 코드의 내용을 이 파일을 실행하여 action을 수행하는 주체(GitHub Actions에서 사용하는 VM)가 읽을 수 있도록 허용
permissions:
  contents: read

# 실제 실행될 내용들을 정의
jobs:
  build:
    runs-on: ubuntu-latest # ubuntu 최신 버전에서 script를 실행

    steps:
      # 지정한 저장소(현재 REPO)에서 코드를 워크플로우 환경으로 가져오도록 하는 GitHub Action
      - name: Checkout code
        uses: actions/checkout@v3

      # JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # GitHub Secrets로부터 데이터를 받아서, 워크플로우에 application.yml 파일 생성
      - name: Make application.yml
        run: |
          cd ./src/main/resources
          touch ./application.yml
          echo "${{ secrets.APPLICATION_PROD }}"  | base64 --decode  > ./application.yml
      # Gradle을 통해 소스를 빌드
      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

      # Dockerfile을 통해 이미지를 빌드하고, Docker Hub로 푸시
      - name: Docker build & push to Docker repo
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}

      # appleboy/ssh-action@master 액션을 사용하여 서버에 SSH로 접속하고, Docker 작업 수행
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            echo "Pulling image from docker hub ..."
            sudo docker rm -f $(docker ps -qa) # 모든 기존 컨테이너 제거
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }} # Docker 이미지 Pull
            docker-compose up -d # Docker Compose로 컨테이너 실행
            docker image prune -f # 사용하지 않는 Docker 이미지 정리
